# Reformat the to-do list into a structured markdown checklist format

# Define the raw to-do list content
raw_todo = """What is a nice level to get to?
Running locally Keycloak
Running locally OPAL (not OPA)
OPAL is like an integration aggregator of policies and data for OPA
Get custom provider configured for Keycloak so that OPAL can retrieve your user/roles information from Keycloak
Write a rego policy which uses that

locally set up OPAL, within OPAL there are OPA agents, these are the same as what you are used to. but also there are integrations into the data and policy partitions of what an OPA needs to make a authorization decision.

explore how to setup the data side: static json, rest endpoints, perhaps a db. explore how to use git as a policy store.

i wanted to also lay out a scenario of what your policies should look like. so take your previous policies as learnings, and now this scenario is what your policy should cover:

5 different users each with one of the below roles

5 different roles:
user
admin
change specialist 1
change specialist 2
change specialist 3
1 permission: ADD_ATTACHMENT

1 input object: change-request

admin and change specialist 1 can do ADD_ATTACHEMENT always

change_specialist 2 can do it, only if the status of change-request is not CLOSED

change_specialist 3 can only do it if status is DRAFTED

user cant do this

cover the rego unit tests

cover the integration tests

have these policies sync via git with opal to the opa agent within it

your input should only indicate the user and the change request object. OPAL should find out some other way what roles the user has, and what that role can do."""

# Split the content into lines and filter out empty lines
lines = [line.strip() for line in raw_todo.split('\n') if line.strip()]

# Format the lines into a markdown checklist
formatted_lines = [f"- [ ] {line}" for line in lines]

# Join the formatted lines into a single markdown string
markdown_todo = '\n'.join(formatted_lines)

# Save the formatted checklist to a markdown file
with open("todo_checklist.md", "w") as f:
    f.write(markdown_todo)

# Print success message
print("The to-do list has been formatted and saved as 'todo_checklist.md'.")

